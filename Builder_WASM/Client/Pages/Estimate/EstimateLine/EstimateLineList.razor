@page "/estimatelinelist/{Id:int}"

<h3>Estimate Line List</h3>

<div class="row mt-5">
    <h6>Groupe</h6>
    <div class="col col-12 col-md-4 form-group mb-3">
        <Groupe groupes="groupes" OnChangeCallback="SelectGroupe"/>        
    </div>
    <div class="col col-12 col-md-8 form-group mb-3">
        <input @bind=nameGroup class="form-control" type="text" disabled=@disableGroupe placeholder=@holderGroup></input>
    </div>
</div>

<div class="row mt-5">
    <h6>Item</h6>
    <div class="col col-12 col-md-4 form-group mb-3">
        <Groupe groupes="groupes" OnChangeCallback="SelectGroupe" />
    </div>
    <div class="col col-12 col-md-8 form-group mb-3">
        <input @bind=nameGroup class="form-control" type="text" disabled=@disableGroupe placeholder=@holderGroup></input>
    </div>
</div>

<div class="row mt-5">
    <h6>Description</h6>
    <div class="col col-12 col-md-4 form-group mb-3">
        <Groupe groupes="groupes" OnChangeCallback="SelectGroupe" />
    </div>
    <div class="col col-12 col-md-8 form-group mb-3">
        <input @bind=nameGroup class="form-control" type="text" disabled=@disableGroupe placeholder=@holderGroup></input>
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    IEnumerable<EstimateLine> lines = new List<EstimateLine>();

    IEnumerable<DGroupe> groupes = new List<DGroupe>();
    IEnumerable<DItem> items = new List<DItem>();
    IEnumerable<DDescription> descriptions = new List<DDescription>();

    string nameGroup = string.Empty;
    bool disableGroupe { get; set; } = false;
    string holderGroup { get; set; } = "You can write your answer...";

    EstimateLineType type = EstimateLineType.Material;

    protected override async Task OnInitializedAsync()
    {
        groupes = (await HttpService.GetAPI<IEnumerable<DGroupe>>("api/DGroupes/type/" + type))?.Response!;
        var temp = await HttpService.GetAPI<IEnumerable<EstimateLine>>("api/EstimateLines/estimate/" + Id);
        if (temp.IsSuccessStatusCode)
        {
            lines = temp.Response;
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

    void SelectGroupe(DGroupe groupe)
    {
        nameGroup = groupe?.NameGroupe ?? string.Empty;
        disableGroupe = (string.IsNullOrEmpty(nameGroup)) ? false : true;
        holderGroup = (disableGroupe) ? "" : "You can write your answer...";
    }
    
}
