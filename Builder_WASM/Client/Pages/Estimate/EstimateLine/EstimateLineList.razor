@page "/estimatelinelist/{Id:int}"

<h3 class="mb-5">Estimate line</h3>
<div class="h5 mb-1 fw-bold">   
    <button class="btn btn-success btn-circle" type="button" @onclick=@AddMaterial>
        <span class="oi oi-plus"></span>
    </button>
    Material
</div>

<div class="h5 mb-5 fw-bold">    
    <button class="btn btn-success btn-circle" type="button" @onclick=@AddLabour>
        <span class="oi oi-plus"></span>
    </button>
    Labour
</div>

@if (isVisible)
{
    <div class="row">
        <Groupe Groupes="groupes" OnChangeCallback="SelectGroupe" placeholder="You can write your answer..." />    
    </div>
    <div class="row mt-1">
        <Item Items="items" OnChangeCallback="SelectItem" placeholder="You can write your answer..." />
    </div>
    <div class="row mt-1">
        <Description Descriptions="descriptions" OnChangeCallback="SelectDescription" placeholder="You can write your answer..." />
    </div>
    <div class="row mt-1 mb-5">
        <div class="col form-control">
            <button class="btn btn-success btn-circle" type="button" @onclick=Added>
                <span class="oi oi-check"></span>
            </button>
            <button class="btn btn-danger btn-circle" type="button" @onclick=Cancel>
                <span class="oi oi-x"></span>
            </button>
        </div>
        
    </div>
}
else
{
    <table class="table caption-top mb-5">
        <caption class="text-danger fw-bold">List of Material</caption>
        <thead>
            <tr>
                <th scope="col">Groupe</th>
                <th scope="col">Item</th>
                <th scope="col">Description</th>
                <th scope="col">Count</th>
                <th scope="col">Rate</th>
                <th scope="col">Price</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in linesMaterial!)
            {

                <tr>
                    <td class="col-2">@item.Groupe</td>
                    <td class="col-2">@item.Item</td>
                    <td class="col-3">@item.Description</td>
                    <td class="col-1">@item.Count</td>
                    <td class="col-1">@item.Rate</td>
                    <td class="col-1">@item.Price</td>
                    <td class="col-2">
                        <button class="btn btn-warning btn-circle m-1" type="button" @onclick=@(()=> Edit(item))>
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger btn-circle m-1" type="button" @onclick=@(()=> Delete(item.Id))>
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table caption-top">
        <caption class="text-danger fw-bold">List of Labour</caption>
        <thead>
            <tr>
                <th scope="col">Groupe</th>
                <th scope="col">Item</th>
                <th scope="col">Description</th>
                <th scope="col">Count</th>
                <th scope="col">Rate</th>
                <th scope="col">Price</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in linesLabour!)
            {

                <tr>
                    <td class="col-2">@item.Groupe</td>
                    <td class="col-2">@item.Item</td>
                    <td class="col-3">@item.Description</td>
                    <td class="col-1">@item.Count</td>
                    <td class="col-1">@item.Rate</td>
                    <td class="col-1">@item.Price</td>
                    <td class="col-2">
                        <button class="btn btn-warning btn-circle m-1" type="button" @onclick=@(()=> Edit(item))>
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger btn-circle m-1" type="button" @onclick=@(()=> Delete(item.Id))>
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public int Id { get; set; }

    IEnumerable<EstimateLine> linesMaterial = new List<EstimateLine>();
    IEnumerable<EstimateLine> linesLabour = new List<EstimateLine>();

    IEnumerable<DGroupe> groupes = new List<DGroupe>();
    IEnumerable<DItem> items = new List<DItem>();
    IEnumerable<DDescription> descriptions = new List<DDescription>();

    DGroupe dataGroupe = new DGroupe();
    DItem dataItem = new DItem();
    DDescription dataDescription = new DDescription();


    EstimateLineType type;

    bool isVisible = false;

    protected override async Task OnInitializedAsync()
    {        
        var temp = await HttpService.GetAPI<IEnumerable<EstimateLine>>("api/EstimateLines/estimate/" + Id);
        if (temp.IsSuccessStatusCode)
        {
            linesMaterial = temp.Response.Where(x=>x.Type == EstimateLineType.Material);
            linesLabour = temp.Response.Where(x => x.Type == EstimateLineType.Labour);
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

    async Task Added()
    {
        isVisible = false;
        EstimateLine newLine = new EstimateLine();
        newLine.EstimateId = Id;
        newLine.Type = type;
        newLine.Groupe = dataGroupe.NameGroupe;
        newLine.Item = dataItem.NameItem;
        newLine.Description = dataDescription.NameDescription;
        newLine.Rate = dataDescription.RateDescription;

        var temp = await HttpService.PostAPI<EstimateLine>("api/EstimateLines", newLine);
        if (temp.IsSuccessStatusCode)
        {
            toastService.ShowToast(temp.Response.Description + " created!", ToastLevel.Success);
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }

        await OnInitializedAsync();
    }

    void Cancel()
    { 
        isVisible = false;
    }

    async Task SelectGroupe(DGroupe data)
    {
        if (dataGroupe != data)
        {
            dataGroupe = data;
            var temp = await HttpService.GetAPI<IEnumerable<DItem>>("api/DItems/groupe/" + data.Id);
            if (temp.IsSuccessStatusCode)
            {
                items = temp.Response;
            }
            else
            {
                toastService.ShowToast(temp.Message, ToastLevel.Error);
            }
        }
    }

    async Task SelectItem(DItem data)
    {
        if (dataItem != data)
        {
            dataItem = data;
            var temp = await HttpService.GetAPI<IEnumerable<DDescription>>("api/DDescriptions/item/" + data.Id);
            if (temp.IsSuccessStatusCode)
            {
                descriptions = temp.Response;
            }
            else
            {
                toastService.ShowToast(temp.Message, ToastLevel.Error);
            }
        }
    }

    void SelectDescription(DDescription data)
    {
        dataDescription = data;       
    }

    async Task AddMaterial()
    {
        type = EstimateLineType.Material;
        items = null!;
        descriptions = null!;
        var temp = await HttpService.GetAPI<IEnumerable<DGroupe>>("api/DGroupes/type/" + type);
        if (temp.IsSuccessStatusCode)
        {
            groupes = temp.Response;            
            isVisible = true;
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }        
    }
    async Task AddLabour()
    {
        type = EstimateLineType.Labour;
        items = null!;
        descriptions = null!;
        var temp = await HttpService.GetAPI<IEnumerable<DGroupe>>("api/DGroupes/type/" + type);
        if (temp.IsSuccessStatusCode)
        {
            groupes = temp.Response;
            isVisible = true;
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }        
    }

    void Edit(EstimateLine line)
    { 
    }

    async Task Delete(int id)
    {
        var temp = await HttpService.DeleteAPI<ResponseMessage>("api/EstimateLines/" + id);
        if (temp.IsSuccessStatusCode)
        {
            toastService.ShowToast(temp.Response.Message, ToastLevel.Success);
            await OnInitializedAsync();
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

}
