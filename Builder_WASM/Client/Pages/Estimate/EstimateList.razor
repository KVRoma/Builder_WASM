@page "/estimatelist/{Id:int?}"

@if (display == "load")
{
    <p>
        <em>
            <span class="spinner-border spinner-border-sm mr-1"></span>
            Loading Estimates...
        </em>
    </p>
}
else if (display == "ok")
{
    <div class="h3 mb-1 fw-bold">
        Estimate
        <button class="btn btn-success btn-circle-xl" type="button" @onclick=@Add>
            <span class="oi oi-plus"></span>
        </button>
    </div>

    <div class="h6 mb-5 fst-italic">(Count: @estimates?.Count())</div>

    <div class="row row-cols-1 row-cols-lg-3 g-4">
        @foreach (var item in estimates!)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@item.NumberEstimate - @item.ClientJob?.PrimaryFullName</h5>
                        <p class="card-text">
                            <div>Date: @item.DateEstimate.ToShortDateString()</div>
                            <div>Material: $@item.MaterialTotal.ToString()</div>
                            <div>Labour: $@item.LabourTotal.ToString()</div>
                            <div>Total: $@item.InvoiceGrandTotal.ToString()</div>
                        </p>
                    </div>
                    <div class="card-footer text-center text-nowrap">
                        <button class="btn btn-primary btn-circle" type="button" @onclick=@(()=> View(item))>
                            <span class="oi oi-monitor"></span>
                        </button>
                        <button class="btn btn-warning btn-circle" type="button" @onclick=@(()=> Edit(item))>
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger btn-circle" type="button" @onclick=@(()=> Delete(item))>
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    IEnumerable<Estimate> estimates = null!;
    string display = "load";

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {            
            if(AuthenticationService.User.CompanyId != null) 
            {
                var est = await HttpService.GetAPI<IEnumerable<Estimate>>("api/Estimates");
                display = "ok";

                if (est.IsSuccessStatusCode)
                {
                    estimates = est.Response;
                }
                else
                {
                    toastService.ShowToast(est.Message, ToastLevel.Error);
                    estimates = new List<Estimate>();
                }
            }
            else
            {                
                NavigationManager.NavigateTo("/notcompany");
            }
        }
        else
        { 
            var est = await HttpService.GetAPI<IEnumerable<Estimate>>("api/Estimates/client/" + Id);
            display = "ok";

            if (est.IsSuccessStatusCode)
            {
                estimates = est.Response;
            }
            else
            {
                toastService.ShowToast(est.Message, ToastLevel.Error);
                estimates = new List<Estimate>();
            }
        }
    }

    void Add()
    {
        NavigationManager.NavigateTo("/estimatesettings");
    }

    void View(Estimate estimate)
    {
        
    }

    void Edit(Estimate estimate)
    {
        NavigationManager.NavigateTo("/estimatesettings/" + estimate.Id);
    }

    async Task Delete(Estimate estimate)
    {
        var temp = await HttpService.DeleteAPI<ResponseMessage>("api/Estimates/" + estimate.Id);


        if (temp.IsSuccessStatusCode)
        {
            toastService.ShowToast(temp.Response.Message, ToastLevel.Success);
            await OnInitializedAsync();
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

}
