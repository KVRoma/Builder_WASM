@page "/fetchdata"
@using System.Net.Http.Headers;


<PageTitle>Page for testing</PageTitle>

<h1>TEST</h1>

<div class="m-4">
    <button @onclick=LoadFile>Test Load</button>
</div>


    <InputFile class="form-control text-primary fw-bold" OnChange="@HandleSelected" />
    @if (FileUrl != null)
    {
        <div class="mt-4">
            <img src="@FileUrl" style="width:100px" />
        </div>       
        
    }    




@code {

    private string test = string.Empty;
    string? _exportUrl = null;


    public string FileUrl { get; set; }
    public FileData fileData { get; set; }



    private async Task HandleSelected(InputFileChangeEventArgs e)
    {

        IBrowserFile file = e.File;

        string extension = FileExtension(file.Name);
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string fileType = file.ContentType;
        string fileUrl = $"data:{fileType};base64,{Convert.ToBase64String(buffers)}";
        FileUrl = fileUrl;
        fileData = new FileData
            {
                Data = buffers,
                FileType = fileType,
                Size = file.Size,
                Extension = extension,
                Name = "company_" + AuthenticationService.User.CompanyId.ToString()! + 
                       "_user_" + AuthenticationService.User.Id.ToString()! + 
                       "_logo"
        };


        var temp = (await HttpService.Post<ResponseMessage>("api/SaveAndLoadFile" + "/save", fileData)).Message;        

    }

    private async Task LoadFile()
    {
        var file = await HttpService.GetAPI<FileData>("api/SaveAndLoadFile/load/1agr.pdf");
        if (file.IsSuccessStatusCode)
        {
            await jSRuntime.InvokeVoidAsync("openFile", file.Response.Data, file.Response.FileType, "View - TestName.pdf");
            // await jSRuntime.InvokeVoidAsync("saveFile", file.Response.Data, file.Response.FileType, "TestName.pdf");
        }
        else
        {
            toastService.ShowToast(file.Message, ToastLevel.Error);
        }


    }

    private string FileExtension(string name)
    {     
        string[] words = name.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        return words[1];
    }


   
}
