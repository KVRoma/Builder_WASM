@page "/itemlist/{Id:int}"

<div class="h3 mb-1 fw-bold">
    Items dictionary
    <button class="btn btn-success btn-circle-xl" type="button" @onclick=@Add>
        <span class="oi oi-plus"></span>
    </button>
</div>

<div class="h6 mb-5 fst-italic">(Count: @items?.Count())</div>

@if (isVisible)
{
    <div class="card-body">
        <EditForm Model=@Model OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label class="form-label">Groupe</label>
                <InputSelect @bind-Value="Model.DGroupeId" class="form-control text-primary fw-bold">                    
                    @foreach (var item in groupes)
                    {
                        <option value="@item.Id">@item.NameGroupe</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.DGroupeId)" />
            </div>

            <div class="form-group mb-3">
                <label class="form-label">Supplier</label>
                <InputSelect @bind-Value="Model.DSupplierId" class="form-control text-primary fw-bold">
                    <option value="">None</option>
                    @foreach (var item in suppliers)
                    {
                        <option value="@item.Id">@item.NameSupplier</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.DSupplierId)" />
            </div>

            <div class="form-group mb-3">
                <InputText @bind-Value="Model.NameItem" class="form-control text-primary fw-bold" placeholder="Name Item" />
                <ValidationMessage For="@(() => Model.NameItem)" />
            </div>

            <div class="text-end">
                <button class="btn btn-success text-nowrap mb-1" style="width:150px">
                    <span class="oi oi-circle-check"></span>
                    Ok
                </button>
                <button class="btn btn-primary text-nowrap mb-1" style="width:150px" @onclick=Cancel>
                    <span class="oi oi-circle-x"></span>
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th scope="col">Groupe</th>
            <th scope="col">Name</th>
            <th scope="col">Supplier</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in items!)
        {

            <tr>
                <td>@item.DGroupe?.NameGroupe</td>
                <td>@item.NameItem</td>
                <td>@item.DSupplier?.NameSupplier</td>
                <td>
                    <button class="btn btn-primary btn-circle" type="button" @onclick=@(()=> View(item))>
                        <span class="oi oi-monitor"></span>
                    </button>
                    <button class="btn btn-warning btn-circle m-1" type="button" @onclick=@(()=> Edit(item))>
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button class="btn btn-danger btn-circle m-1" type="button" @onclick=@(()=> Delete(item.Id))>
                        <span class="oi oi-trash"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter]
    public int Id { get; set; }

    IEnumerable<DItem> items = new List<DItem>();
    IEnumerable<DSupplier> suppliers = new List<DSupplier>();
    IEnumerable<DGroupe> groupes = new List<DGroupe>();
    bool isVisible;
    DItem Model = new DItem();

    protected override async Task OnInitializedAsync()
    {
        isVisible = false;

        groupes =(await HttpService.GetAPI<IEnumerable<DGroupe>>("api/DGroupes"))?.Response!;        
        suppliers = (await HttpService.GetAPI<IEnumerable<DSupplier>>("api/DSuppliers"))?.Response!;

        var temp = await HttpService.GetAPI<IEnumerable<DItem>>("api/DItems/groupe/" + Id);

        if (temp.IsSuccessStatusCode)
        {
            items = temp.Response;            
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

    private void Add()
    {
        isVisible = true;
        Model = new DItem();
        Model.DGroupeId = Id;
    }

    private void View(DItem item)
    {
        NavigationManager.NavigateTo("/descriptionlist/" + Id + "/" + item.Id);
    }

    private void Edit(DItem item)
    {
        isVisible = true;
        Model = item;
    }

    private async Task Delete(int id)
    {
        var temp = await HttpService.DeleteAPI<ResponseMessage>("api/DItems/" + id);

        if (temp.IsSuccessStatusCode)
        {
            toastService.ShowToast(temp.Response.Message, ToastLevel.Success);
            await OnInitializedAsync();
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

    private void Cancel()
    {
        isVisible = false;
        Model = new DItem();
    }

    private async Task HandleValidSubmit()
    {

        if (Model.Id == 0)
        {
            var temp = await HttpService.PostAPI<DItem>("api/DItems", Model);

            if (temp.IsSuccessStatusCode)
            {
                toastService.ShowToast(temp.Response.NameItem + " created!", ToastLevel.Success);
            }
            else
            {
                toastService.ShowToast(temp.Message, ToastLevel.Error);
            }
        }
        else
        {
            Model.DSupplier = null;
            Model.DGroupe = null;

            var temp = await HttpService.PutAPI<ResponseMessage>("api/DItems/" + Model.Id, Model);

            if (temp.IsSuccessStatusCode)
            {
                toastService.ShowToast(temp.Response.Message, ToastLevel.Success);
            }
            else
            {
                toastService.ShowToast(temp.Message, ToastLevel.Error);
            }
        }        
        await OnInitializedAsync();
    }


}