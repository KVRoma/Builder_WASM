@page "/descriptionlist/{GroupeId:int}/{Id:int}"

<div class="h3 mb-1 fw-bold">
    Descriptions dictionary
    <button class="btn btn-success btn-circle-xl" type="button" @onclick=@Add>
        <span class="oi oi-plus"></span>
    </button>
</div>

<div class="h6 mb-5 fst-italic">(Count: @descriptions?.Count())</div>

@if (isVisible)
{
    <div class="card-body">
        <EditForm Model=@Model OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label class="form-label">Item</label>
                <InputSelect @bind-Value="Model.DItemId" class="form-control text-primary fw-bold">
                    @foreach (var item in items)
                    {
                        <option value="@item.Id">@item.NameItem</option>
                    }

                </InputSelect>
                <ValidationMessage For="@(() => Model.DItemId)" />
            </div>

            <div class="form-group mb-3">
                <InputText @bind-Value="Model.NameDescription" class="form-control text-primary fw-bold" placeholder="Name Description" />
                <ValidationMessage For="@(() => Model.NameDescription)" />
            </div>

            <div class="form-group mb-3">
                <InputNumber @bind-Value="Model.RateDescription"  class="form-control text-primary fw-bold" placeholder="Rate Description" />
                <ValidationMessage For="@(() => Model.RateDescription)" />
            </div>

            <div class="text-end">
                <button class="btn btn-success text-nowrap mb-1" style="width:150px">
                    <span class="oi oi-circle-check"></span>
                    Ok
                </button>
                <button class="btn btn-primary text-nowrap mb-1" style="width:150px" @onclick=Cancel>
                    <span class="oi oi-circle-x"></span>
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th scope="col">Item</th>
            <th scope="col">Name</th>
            <th scope="col">Rate</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in descriptions!)
        {

            <tr>
                <td>@item.DItem?.NameItem</td>
                <td>@item.NameDescription</td>
                <td class="text-nowrap">$ @item.RateDescription.ToString()</td>
                <td>                    
                    <button class="btn btn-warning btn-circle m-1" type="button" @onclick=@(()=> Edit(item))>
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button class="btn btn-danger btn-circle m-1" type="button" @onclick=@(()=> Delete(item.Id))>
                        <span class="oi oi-trash"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int GroupeId { get; set; }

    IEnumerable<DItem> items = new List<DItem>();
    IEnumerable<DDescription> descriptions = new List<DDescription>();
    bool isVisible;
    DDescription Model = new DDescription();

    protected override async Task OnInitializedAsync()
    {
        isVisible = false;
        items = (await HttpService.GetAPI<IEnumerable<DItem>>("api/DItems/groupe/" + GroupeId))?.Response!;
        var temp = await HttpService.GetAPI<IEnumerable<DDescription>>("api/DDescriptions/item/" + Id);
        if (temp.IsSuccessStatusCode)
        {
            descriptions = temp.Response;            
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

    private void Add()
    {
        isVisible = true;
        Model = new DDescription();
        Model.DItemId = Id;
    }



    private void Edit(DDescription item)
    {
        isVisible = true;
        Model = item;
    }

    private async Task Delete(int id)
    {
        var temp = await HttpService.DeleteAPI<ResponseMessage>("api/DDescriptions/" + id);

        if (temp.IsSuccessStatusCode)
        {
            toastService.ShowToast(temp.Response.Message, ToastLevel.Success);
            await OnInitializedAsync();
        }
        else
        {
            toastService.ShowToast(temp.Message, ToastLevel.Error);
        }
    }

    private void Cancel()
    {
        isVisible = false;
        Model = new DDescription();
    }

    private async Task HandleValidSubmit()
    {
        if (Model.Id == 0)
        {
            var temp = await HttpService.PostAPI<DDescription>("api/DDescriptions", Model);

            if (temp.IsSuccessStatusCode)
            {
                toastService.ShowToast(temp.Response.NameDescription + " created!", ToastLevel.Success);
            }
            else
            {
                toastService.ShowToast(temp.Message, ToastLevel.Error);
            }
        }
        else
        {
            Model.DItem = null;

            var temp = await HttpService.PutAPI<ResponseMessage>("api/DDescriptions/" + Model.Id, Model);

            if (temp.IsSuccessStatusCode)
            {
                toastService.ShowToast(temp.Response.Message, ToastLevel.Success);
            }
            else
            {
                toastService.ShowToast(temp.Message, ToastLevel.Error);
            }
        }

        await OnInitializedAsync();
    }


}