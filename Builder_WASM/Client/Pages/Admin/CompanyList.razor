@page "/companylist"

<h3>Company List</h3>
 <button class="btn btn-success mb-3" type="button" @onclick=@Add>
     <span class="oi oi-plus"></span>
     Add
 </button>

@if (companies == null)
{
    <p>
        <em>
            <span class="spinner-border spinner-border-sm mr-1"></span>
            Loading Company...
        </em>
    </p>
}
else
{
    <h5>Count companies: @companies.Count()</h5>

    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in companies)
            {                
                <tr>
                    <td>@item.HeaderName</td>
                    <td>@item.HeaderCompanyName</td>
                    <td>
                        <button class="btn btn-info" type="button" @onclick=@(()=> Edit(item))>Edit</button>
                        <button class="btn btn-danger" type="button" @onclick=@(() => Delete(item))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    IEnumerable<Company> companies = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            companies = (await HttpService.Get<IEnumerable<Company>>("api/Companies")) ?? null!;
        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
        }
    }

    async Task Delete(Company company)
    {

        ResponseMessage resultDel = await HttpService.Delete<ResponseMessage>("api/Companies/" + company.Id);
        companies = (await HttpService.Get<IEnumerable<Company>>("api/Companies")) ?? null!;      

    }
    void Edit(Company company)
    {
        NavigationManager.NavigateTo("/CompanySettings/" + false + "/" + company.Id);
    }
    void Add()
    {
        NavigationManager.NavigateTo("/CompanySettings/" + true);
    }

}
