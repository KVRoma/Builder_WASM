<button class="btn btn-outline-primary" type="button" @onclick=@(()=>messageView = messageView ? false : true)>
    Messages
    @if (CountOpenMessage(UserData) > 0)
    {
        <span class="badge bg-danger rounded-pill">
            <span class="oi oi-envelope-closed"></span>
        </span>
    }
</button>
@if (messageView)
{
    <div class="row m-2" style="overflow-y:scroll; height:150px">
        <div class="col text-start">
            @foreach(var item in UserData.Messages)
            {
                <p>@item.Created.ToShortDateString() - @item.Message</p>
            }
        </div>
    </div>
    <div class="input-group">
        <input class="form-control" type="text" placeholder="Reply to user please..." @bind=@textNewMessage/>
        <button class="btn btn-outline-success" @onclick=SendClick>Send</button>
    </div>
}


@code {
    [Parameter]
    public UserRegistered UserData { get; set; } = null!;

    [Parameter]
    public EventCallback<UserRegistered> SendClickCallback { get; set; }

    bool messageView = false;
    string textNewMessage = string.Empty;



    int CountOpenMessage(UserRegistered user)
    {
        return user.Messages.Where(x => x.ReadByAdmin == false).Count();
    }



    async Task SendClick()
    {
        messageView = false;        

        UserMessage userMessage = new UserMessage();
        userMessage.Message = "Admin: " + textNewMessage;
        userMessage.ReadByAdmin = true;

        foreach (var item in UserData.Messages)
        {
            item.ReadByAdmin = true;
        }

        UserData.Messages.Add(userMessage);
        
        textNewMessage = string.Empty;

        await SendClickCallback.InvokeAsync(UserData);
    }
}
