@page "/adminlist"

<h3>Administrator List</h3>

@if (userRegistereds == null)
{
    <p><em>
        <span class="spinner-border spinner-border-sm mr-1"></span>
        Loading
     </em></p>
}
else
{
    <table class="table table-striped align-middle">
        <caption>Count user: @userRegistereds?.Count()</caption>
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Company</th>
                <th scope="col">Hire</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var user in userRegistereds!)
            {
                <tr>
                    <td>@user.Name</td>
                    <td class="text-nowrap">
                        <SelectCompany UserData=@user Companies=@companies OnClickCallback=UpdateUserRegistered></SelectCompany>
                    </td>
                    <td>@NameHire(@user?.CompanyId)</td>
                </tr>
            }

        </tbody>
    </table>

}


@code
{
    IEnumerable<UserRegistered> userRegistereds = null!; 
    IEnumerable<Company> companies = null!; 
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userRegistereds = (await HttpService.Get<IEnumerable<UserRegistered>>("api/UserRegistereds")) ?? null!;
            companies = (await HttpService.Get<IEnumerable<Company>>("api/Companies")) ?? null!;
        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
        }
    }

    async Task UpdateUserRegistered(UserRegistered user)
    {
        message = await HttpService.Put<string>("api/UserRegistereds/" + user.Id, user);
    }

    string NameHire(int? id)
    {
        return companies?.FirstOrDefault(x => x.Id == id)?.HeaderCompanyName?.ToString()!;
    }
}