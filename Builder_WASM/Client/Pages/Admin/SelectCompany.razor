<div class="card text-white bg-secondary">
    <div class="card-header text-center">
        <h4>
            <span class="oi oi-person @textColor"></span>
            @UserData.Name
        </h4>
        @if (!string.IsNullOrWhiteSpace(@Hiring))
        {
            <h5>Company: @Hiring</h5>
        }
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-6 d-grid gap-2 d-flex justify-content-start">
                <select class="form-select" @bind="UserData.CompanyId">
                    <option value="">Select</option>
                    @foreach (var item in Companies)
                    {
                        <option value="@item.Id">@item.HeaderName</option>
                    }
                </select>
            </div>
            <div class="col-6 d-grid gap-2 d-flex justify-content-end">
                <button class="btn  btn-success" type="button" @onclick=Save>
                    <span class="oi oi-circle-check"></span>
                    Hire
                </button>
                <button class="btn  btn-danger" type="button" @onclick=Delete>
                    <span class="oi oi-circle-x"></span>
                    User
                </button>
            </div>

        </div>

    </div>
    @if (UserData.Messages?.Count() != 0)
    {
        <div class="card-footer text-center bg-white text-black">
            <h6>----- Message -----</h6>
            <div class="text-start">
                @if (UserData.Messages != null)
                {
                    @foreach (var item in UserData.Messages)
                    {
                        <h6>@item.Created.ToShortDateString() : @item.Message</h6>
                    }
                }
            </div>
            <div>
                <input type="text"/>
            </div>
            <div class="text-end">
                <button class="btn btn-outline-primary" @onclick=OkMessage>
                    <span class="oi oi-check"></span>
                    Ok
                </button>
            </div>
        </div>
    }
</div>






@code {

    [Parameter]
    public UserRegistered UserData { get; set; } = null!;
    [Parameter]
    public IEnumerable<Company> Companies { get; set; } = null!;
    [Parameter]
    public string Hiring { get; set; } = string.Empty;


    [Parameter]
    public EventCallback<UserRegistered> SaveClickCallback { get; set; }
    [Parameter]
    public EventCallback<UserRegistered> DeleteClickCallback { get; set; }
    
       

    string textColor = "";


    protected override void OnParametersSet()
    {
        textColor = string.IsNullOrWhiteSpace(Hiring) ? "text-danger" : "";        
    }

    async Task Save()
    {
        await SaveClickCallback.InvokeAsync(UserData);
    }

    async Task Delete()
    {
        await DeleteClickCallback.InvokeAsync(UserData);        
    }

    void OkMessage()
    {
        //OkMessageCallback.InvokeAsync(Messages);
    }

}