@page "/authenticate/login"

<div class="row justify-content-center">
    <div class="col-xl-4 col-md-6 col-sm-12">
        <div class="card text-white bg-secondary">
            <h4 class="card-header text-center">Builder - 2022 (web version)</h4>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group mb-3">
                        
                        <InputText @bind-Value="model.Username" class="form-control" placeholder="Username"/>
                        <ValidationMessage For="@(() => model.Username)" />
                    </div>
                    <div class="form-group mb-3">
                        
                        <InputText @bind-Value="model.Password" type="password" class="form-control" placeholder="Password" />
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>
                    <button class="btn btn-primary">
                        @if (loading) {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Login
                    </button>
                    @if (!string.IsNullOrEmpty(error)) {
                        <div class="alert alert-danger mt-3 mb-0">@error</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    AuthenticateRequest model = new AuthenticateRequest();
    private bool loading;
    private string error = string.Empty;
        
    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Login(model);            
            AuthenticateResponse user = await LocalStorageService.GetAsync<AuthenticateResponse>("user");
            if (user.Id == 0)
            {
                error = user.Message;                
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
